@model Journey.Controllers.HomeModel

@{
    ViewBag.Title = "Editor";
    Layout = "~/Views/Shared/_JourneyHome.cshtml";
}
@section HeaderLeft{
    <h1 style="margin-top:35px;">Home with Post</h1>
}


<div class="journey-page-body" data-journey-script="name-editor" id="name-editor" style="width:500px;">
    <div class="panel panel-default">
        <div class="panel-heading">Submit and refresh</div>
        <div class="panel-body">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">Submit and open a new page via form attribute</div>
        <div class="panel-body">
        @{
            var routeValues = new RouteValueDictionary();
            routeValues.Add("NewPage", true);

            var attributes = new Dictionary<string, object>();
            attributes.Add("data-open-new-page", "true");
        }

        @* Opening a new page after submit can either be done via this attribute (data-open-new-page="true") or as a comment in the incoming page. This example returns the comment too, but it isn't necessary in this case.*@
        @using (Html.BeginForm("HomeWithPost", "Journey", routeValues, FormMethod.Post, attributes))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>


    <div class="panel panel-default">
        <div class="panel-heading">Submit and open a new page via returned comment</div>
        <div class="panel-body">
            @* Opening a new page after submit can either be done like this comment on the returned page or via
                an attribute on the form element. *@                
            @using (Html.BeginForm("HomeWithPostNewPage", "Journey"))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>

</div>